/**
 * Menu activator
 *
 * @mixin
 *
 * Handles the click and hover activation
 * Supports slotted and detached activators
 */
export default {
  props: {
    openDelay: {
      type: [Number, String],
      default: 0
    },
    closeDelay: {
      type: [Number, String],
      default: 500
    }
  },

  methods: {
    activatorClickHandler: function activatorClickHandler(e) {
      if (this.disabled) return;
      if (this.openOnClick && !this.isActive) {
        this.getActivator().focus();
        this.isActive = true;
        this.absoluteX = e.clientX;
        this.absoluteY = e.clientY;
      } else if (this.closeOnClick && this.isActive) {
        this.getActivator().blur();
        this.isActive = false;
      }
    },
    mouseEnterHandler: function mouseEnterHandler(e) {
      var _this = this;

      clearTimeout(this.openTimeout);
      clearTimeout(this.closeTimeout);

      if (this.hasJustFocused) return;

      this.openTimeout = setTimeout(function () {
        _this.hasJustFocused = true;
        _this.isActive = true;
      }, parseInt(this.openDelay, 10));
    },
    mouseLeaveHandler: function mouseLeaveHandler(e) {
      var _this2 = this;

      clearTimeout(this.openTimeout);
      clearTimeout(this.closeTimeout);

      if (this.$refs.content.contains(e.relatedTarget)) return;

      // Prevent accidental re-activation
      this.closeTimeout = setTimeout(function () {
        requestAnimationFrame(function () {
          _this2.isActive = false;
          _this2.callDeactivate();
        });
      }, parseInt(this.closeDelay, 10));
    },
    addActivatorEvents: function addActivatorEvents() {
      var activator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!activator) return;
      activator.addEventListener('click', this.activatorClickHandler);
    },
    removeActivatorEvents: function removeActivatorEvents() {
      var activator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!activator) return;
      activator.removeEventListener('click', this.activatorClickHandler);
    }
  }
};